// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>

using pindwin.umvr.Model;
using pindwin.umvr.Reactor;
using pindwin.umvr.Repository;
using pindwin.umvr.Serialization;
using Zenject;

namespace pindwin.Scripts.GameSession
{
	public partial class GameSessionFactory : ModelFactory<IGameSession, GameSessionModel>
	{
		public GameSessionFactory(IRepository<IGameSession> repository, [InjectOptional] ISerializer<GameSessionModel> serializer) : base(repository, serializer)
		{ }
	}

	public partial class GameSessionRepository : SingletonRepository<IGameSession, GameSessionModel, GameSessionReactor>
	{
		public GameSessionRepository(GameSessionReactorFactory gameSessionReactorFactory) : base(gameSessionReactorFactory)
		{ }
	}
	
	public class GameSessionReactorFactory : ReactorFactory<GameSessionModel, GameSessionReactor>
	{ }
}

namespace pindwin.Scripts.GameSession.Generated
{
	public class GameSessionInstallerBase : Installer<GameSessionInstallerBase>
	{
		public override void InstallBindings()
		{
			Container.BindFactory<Id, GameSessionModel, GameSessionFactory>();
			Container.Bind<IModelFactory<IGameSession>>().To<GameSessionFactory>().FromResolve();
			Container.BindFactory<GameSessionModel, GameSessionReactor, GameSessionReactorFactory>();
			Container.BindInterfacesAndSelfTo<GameSessionRepository>().AsSingle();
		}
	}
}